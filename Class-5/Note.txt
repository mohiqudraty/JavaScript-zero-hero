-Functions in JavaScript
=======================
Block of code that performs a specific task, can be invoked whenever needed.

Function help us for ignore code repetitions
redundancy -> Repeat

Function Definition
------------------- We can define with Parameters
function functionName(params) {
    // do some work
}

steps: function[keyword] name[functionName] ([Function Parameters]) { [function block / Working area]}

Function Call
-------------
functionName() // we can call with arguments


-Arrow Function in JavaScript
============================= Modern JavaScript
Compact way of writing a function.

define arrow function
---------------------
const myArrowFunc = (x, y){
    // do some work
}

Function Define: [Declare and Assign a variable] ()[parameters] => [arrow] {} [block]



Note:
function parameters --> like local variables -> Block Scope{} of functions.
We cannot do anything in a function after return the value;







-foEach Loop in Arrays
====================== || Return ❌

arr.forEach(callBackFunction)

callBackFunction: Here, it is a function to execute for each element in the array .

*A callback is a function passed as an argument to another function.



arr.forEach((val) => {
    console.log(val)
})

* forEach have 3 parameters (value, idx, array) // optional



-Some More Array Methods
======================== || Return a New Array ✅

----Map
-------
Crates a new array with the results of some operation. The value its callback returns are used to from new array.

arr.map(callBackFunction(value, idx, array)){}

let newNum = num.map((value) => {
  return value ** 2; // square value
});
console.log(newNum);



----Filter
----------
Crates a new array of elements that give true for a condition/Filter.
Eg: all even elements;


let newArray = arr.filter( (value) => {
    return value % 2 === 0;
})


----Reduce
----------
Performs some operations & Reduces the array to a single value. It returns that single value.

reduce start from first 2 value 


const output = arr.reduce((previous, current) => {
  return res + current;
});
console.log(output);





important: 
What is higher order function?
we can call forEach is a higher order function/method.
that function pass or return a function we can call this is a higher order function/method.







We can pass the function as a parameter also can be return. ( if we pass or return a function ? we can call this is callback function)

NaN === Not a Number;


